// <auto-generated />
using System;
using BeerOverflow.Data.BeerOverflowContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeerOverflow.Data.Migrations
{
    [DbContext(typeof(BeeroverflowContext))]
    [Migration("20200420144817_AddingData")]
    partial class AddingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Abv")
                        .HasColumnType("float");

                    b.Property<int?>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("StyleId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StyleId");

                    b.ToTable("Beers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abv = 5.5,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stolichno Pale Ale",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Abv = 4.7999999999999998,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Abv = 4.5,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka Retro",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Abv = 5.0,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka Spetsialno",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            Abv = 5.0,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amstel Dark",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            Abv = 4.7999999999999998,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza Staro Pivo",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            Abv = 4.4000000000000004,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza 1881",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            Abv = 6.0,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza Tamno",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            Abv = 4.0999999999999996,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Slavena svetlo",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            Abv = 4.0999999999999996,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pleven Svetlo Pivo",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            Abv = 6.0,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Black Sea IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            Abv = 4.2000000000000002,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Jester",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            Abv = 4.2000000000000002,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Halo",
                            StyleId = 7,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Breweries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Brabandere",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Graal",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starobrno",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zatecky Pivovar",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Vergeten Appel",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allgauer Brauhaus",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Versuchsbrauerei",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bulgaria",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belgium",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Czech Republic",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Netherlands",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Germany",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.DrankList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("DrankLists");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<bool>("isDisliked")
                        .HasColumnType("bit");

                    b.Property<bool>("isLiked")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Rating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isFlagged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pale Lager"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dark Lager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amber Lager"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Stout"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pilsner"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IPA"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pale Ale"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Country = "England",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser2",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Country = "Germany",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser3",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Country = "Spain",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser4",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser5",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser6",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser7",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser8",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser9",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            Country = "England",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "TestUser10",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.WishList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("Beers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.Style", "Style")
                        .WithMany("Beers")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("Breweries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.DrankList", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("DrankLists")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("DrankLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Like", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Rating", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.WishList", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("WishLists")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
