// <auto-generated />
using System;
using BeerOverflow.Data.BeerOverflowContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeerOverflow.Data.Migrations
{
    [DbContext(typeof(BeeroverflowContext))]
    [Migration("20200429053251_AddedIdentity")]
    partial class AddedIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Abv")
                        .HasColumnType("float");

                    b.Property<int?>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int?>("StyleId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StyleId");

                    b.ToTable("Beers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abv = 5.5,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stolichno Pale Ale",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Abv = 4.7999999999999998,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Abv = 4.5,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka Retro",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Abv = 5.0,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka Spetsialno",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            Abv = 5.0,
                            BreweryId = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amstel Dark",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            Abv = 4.7999999999999998,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza Staro Pivo",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            Abv = 4.4000000000000004,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza 1881",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            Abv = 6.0,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza Tamno",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            Abv = 4.0999999999999996,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Slavena svetlo",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            Abv = 4.0999999999999996,
                            BreweryId = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pleven Svetlo Pivo",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            Abv = 6.0,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Black Sea IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            Abv = 4.2000000000000002,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Jester",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            Abv = 4.2000000000000002,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Halo",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            Abv = 4.2000000000000002,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Premium Pale Ale",
                            StyleId = 8,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            Abv = 5.0,
                            BreweryId = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus Holy Night",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 16,
                            Abv = 5.2000000000000002,
                            BreweryId = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bavik Super Pils",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 17,
                            Abv = 5.0,
                            BreweryId = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bavik Premium Export",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 18,
                            Abv = 5.2000000000000002,
                            BreweryId = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bavik Pony-Stout",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 19,
                            Abv = 5.0,
                            BreweryId = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bavik Excel Premium Pils",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 20,
                            Abv = 7.5,
                            BreweryId = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Snoek Blond",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 21,
                            Abv = 11.0,
                            BreweryId = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar Sans Pardon Pure-Oak",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 22,
                            Abv = 7.0,
                            BreweryId = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar La Renaissance Gold",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 23,
                            Abv = 7.5,
                            BreweryId = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar Crime Passionnel",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 24,
                            Abv = 5.2000000000000002,
                            BreweryId = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar La Frontière",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 25,
                            Abv = 7.0,
                            BreweryId = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar / Hof Ten Dormaal Amitié",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 26,
                            Abv = 11.0,
                            BreweryId = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hopduvel Gentse Stouter",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 27,
                            Abv = 7.2999999999999998,
                            BreweryId = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hopjutters Triple Hop",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 28,
                            Abv = 9.0,
                            BreweryId = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ne Stoute Loemelaer",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 29,
                            Abv = 7.0,
                            BreweryId = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stoute René",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 30,
                            Abv = 7.2000000000000002,
                            BreweryId = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jean Nicot Dubbel Maduro",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 31,
                            Abv = 4.4000000000000004,
                            BreweryId = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen Černý / Dark / Temné",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 32,
                            Abv = 4.7999999999999998,
                            BreweryId = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen Granát / Garnet",
                            StyleId = 3,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 33,
                            Abv = 4.0999999999999996,
                            BreweryId = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Braník Světlý",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 34,
                            Abv = 5.0,
                            BreweryId = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen Ležák",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 35,
                            Abv = 5.2999999999999998,
                            BreweryId = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen Velvet",
                            StyleId = 3,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 36,
                            Abv = 5.0999999999999996,
                            BreweryId = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starobrno Drak Extra Chmelený Ležák",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 37,
                            Abv = 6.0,
                            BreweryId = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starobrno Baron Trenck",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 38,
                            Abv = 5.0,
                            BreweryId = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starobrno Premium Lager",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 39,
                            Abv = 4.9000000000000004,
                            BreweryId = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hostan Hradni",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 40,
                            Abv = 4.0,
                            BreweryId = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hostan Naše Pivko",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 41,
                            Abv = 5.7000000000000002,
                            BreweryId = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Žatec Dark",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 42,
                            Abv = 5.7000000000000002,
                            BreweryId = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Žatec Celia Dark",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 43,
                            Abv = 4.5999999999999996,
                            BreweryId = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Žatec Blue Label",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 44,
                            Abv = 4.7999999999999998,
                            BreweryId = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ava Zêr",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 45,
                            Abv = 4.7999999999999998,
                            BreweryId = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Žatec Premium",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 46,
                            Abv = 5.2999999999999998,
                            BreweryId = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken H41",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 47,
                            Abv = 5.2000000000000002,
                            BreweryId = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken Dark Lager",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 48,
                            Abv = 5.0,
                            BreweryId = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 49,
                            Abv = 3.3999999999999999,
                            BreweryId = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken Cold Filtered",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 50,
                            Abv = 3.2999999999999998,
                            BreweryId = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken Premium Light",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 51,
                            Abv = 12.0,
                            BreweryId = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt Hellegijt (Maccallan Barrel Aged)",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 52,
                            Abv = 11.0,
                            BreweryId = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt Hellegijt (French Oak Barrel Aged)",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 53,
                            Abv = 6.5,
                            BreweryId = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt Hop Met de Gijt Speciale Editie",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 54,
                            Abv = 8.8000000000000007,
                            BreweryId = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt Stoute Gijt",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 55,
                            Abv = 6.7999999999999998,
                            BreweryId = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt Vredesgijt",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 56,
                            Abv = 9.8000000000000007,
                            BreweryId = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eem Krachtig",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 57,
                            Abv = 7.5,
                            BreweryId = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eem Potig",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 58,
                            Abv = 6.5,
                            BreweryId = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eem Tierig",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 59,
                            Abv = 6.2000000000000002,
                            BreweryId = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tasty Lady",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 60,
                            Abv = 6.5,
                            BreweryId = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orango Sweet Potato Beer",
                            StyleId = 8,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 61,
                            Abv = 5.2999999999999998,
                            BreweryId = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allgäuer Büble Bier Urbayrisch Dunkel",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 62,
                            Abv = 5.5,
                            BreweryId = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Altenmünster Winterbier Dunkel",
                            StyleId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 63,
                            Abv = 5.2999999999999998,
                            BreweryId = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allgäuer Büble Bier Edelbräu",
                            StyleId = 3,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 64,
                            Abv = 4.7999999999999998,
                            BreweryId = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allgäuer Teutsch Pils",
                            StyleId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 65,
                            Abv = 4.9000000000000004,
                            BreweryId = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Altenmünster Brauer Bier Urig Würzig",
                            StyleId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 66,
                            Abv = 5.2999999999999998,
                            BreweryId = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters Pale Ale",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 67,
                            Abv = 4.0,
                            BreweryId = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters Easy Citra Ale",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 68,
                            Abv = 7.5,
                            BreweryId = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters Wild IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 69,
                            Abv = 7.0,
                            BreweryId = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters New England IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 70,
                            Abv = 6.0999999999999996,
                            BreweryId = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters Stout",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 71,
                            Abv = 8.0,
                            BreweryId = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Imperial Stout",
                            StyleId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 72,
                            Abv = 7.0,
                            BreweryId = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann RyePA",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 73,
                            Abv = 7.0,
                            BreweryId = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Double Imperial Black IPA",
                            StyleId = 6,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 74,
                            Abv = 5.2999999999999998,
                            BreweryId = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Summer Ale",
                            StyleId = 7,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 75,
                            Abv = 4.9000000000000004,
                            BreweryId = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Coffee Stout",
                            StyleId = 4,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Breweries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zagorka",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamenitza",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glarus",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Brabandere",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Dochter van de Korenaar",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Graal",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staropramen",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starobrno",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zatecky Pivovar",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heineken",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Natte Gijt",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eem Bier",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allgauer Brauhaus",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidenpeters",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weyermann Versuchsbrauerei",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bulgaria",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belgium",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Czech Republic",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Netherlands",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Germany",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.DrankList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("DrankLists");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<bool>("isDisliked")
                        .HasColumnType("bit");

                    b.Property<bool>("isLiked")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Rating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isFlagged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2837a221-d395-46ff-93ae-4067decf8952",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "94232c99-1765-43c1-a5be-7bfa7a9eaa6b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pale Lager",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dark Lager",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amber Lager",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stout",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pilsner",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IPA",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pale Ale",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blond Ale",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e23efae-9ef1-4440-b167-48dac3f27ecd",
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(2020, 4, 29, 5, 32, 50, 878, DateTimeKind.Utc).AddTicks(8880),
                            Email = "admin@bo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@BO.COM",
                            NormalizedUserName = "ADMIN@BO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIqgXoyxGYv1LVf2ARzAcRODRjw7TLn5tB9phqRa+6oecEO6sYUEtXRO4iEn3c1Akg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "admin@bo.com",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8735eb5b-1434-462e-b6bf-117bbda4fbf4",
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser1",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "732b511c-cdf2-456a-b7d0-099b9e840000",
                            Country = "England",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser2",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d74bacc7-eb42-41d6-9a00-6bd20436bb10",
                            Country = "Germany",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser3",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f96307bd-f9c5-42b5-b8cd-d777dfc82b15",
                            Country = "Spain",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser4",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0fef941-1003-45d3-bb53-d168c4fda5a0",
                            Country = "USA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser5",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "746d268d-efdb-4e7b-be24-f6b18cf78156",
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser6",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f58bff63-5b07-4d75-9a22-787438189f96",
                            Country = "USA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser7",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5785b280-429a-489c-aee1-2a8ba6a5c8fa",
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser8",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0203033-be34-4624-bb65-f7c217267a07",
                            Country = "Bulgaria",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser9",
                            isBanned = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d0c8c67-0b2d-44fd-b6b4-fc4441c079ba",
                            Country = "England",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TestUser10",
                            isBanned = false,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.WishList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("Beers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.Style", "Style")
                        .WithMany("Beers")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("Breweries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.DrankList", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("DrankLists")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("DrankLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Like", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Rating", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.WishList", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("WishLists")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
